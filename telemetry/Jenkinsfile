pipeline {
    agent any

    tools {
        maven "maven:3.6.2"
        jdk "jdk8"
    }

    stages {
        stage("Tag Calculate") {
            when { branch "release/*" }
            steps {
                script {
                    sh "git fetch --tags"
                    def tags = sh(script: "git tag --list --merged", returnStdout: true).trim()
                    String lastTag
                    if (tags) {
                        lastTag = tags.split('\n').reverse()[0]
                        env.VERSION = lastTag
                    } else {
                        lastTag = sh(script: "echo ${BRANCH_NAME} | cut -d'/' -f2", returnStdout: true).trim()
                        env.VERSION = lastTag
                        lastTag = lastTag + ".0"
                    }
                    def (major, minor, patch) = lastTag.split('\\.')
                    def patchNum = 1
                    patchNum += Integer.parseInt(patch)
                    env.NEW_VERSION = "${major}.${minor}.${patchNum}"
                    sh "mvn versions:set -DnewVersion=${env.VERSION}"
                    sh "mvn versions:commit"
                }
            }
        }
        stage("Checking dependency list"){
            when { branch "release/*" }
            steps{
                sh 'mvn dependency:list'
            }
        }

        stage("Build") {
            when { anyOf { branch "main"; branch "release/*"; branch "feature/*" } }
            steps {
                configFileProvider([configFile(fileId: 'global-mavem-xml', variable: 'MVN_SETTINGS')]) {
                    sh "mvn -s $MVN_SETTINGS clean package"
                }
            }
        }

        stage("Check Feature For E2E message") {
            when { branch "feature/*" }
            steps {
                script{
                def lastCommitMessage = sh(script: 'git log -1 --pretty=format:%s', returnStdout: true).trim()
                if (lastCommitMessage.contains("#e2e")) {
                    withCredentials([usernamePassword(credentialsId: 'artifactory-username-password', passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh 'wget -r -np -nH --cut-dirs 4 --user=$username --password=$password http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/analytics/99-SNAPSHOT/'
                    sh 'wget -r -np -nH --cut-dirs 4 --user=$username --password=$password http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/simulator/99-SNAPSHOT/'
                }

                latest_simulator_snapshot= sh(returnStdout: true, script: 'ls -t simulator/99-SNAPSHOT/simulator-99*.jar | head -1').trim()
                latest_analytic_snapshot= sh(returnStdout: true, script: 'ls -t analytics/99-SNAPSHOT/analytics-99*.jar | head -1').trim()
                sh "cp ${latest_analytic_snapshot} analytics.jar"
                sh "cp ${latest_simulator_snapshot} simulator.jar"
                sh "cp target/telemetry-*.jar telemetry.jar"
                sh "java -cp simulator.jar:telemetry.jar:analytics.jar com.lidar.simulation.Simulator"
                    }
                }
            }
        }

        stage("E2E Tests") {
            when { anyOf { branch "main"} }
            steps {
                script{
                withCredentials([usernamePassword(credentialsId: 'artifactory-username-password', passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh 'wget -r -np -nH --cut-dirs 4 --user=$username --password=$password http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/analytics/99-SNAPSHOT/'
                    sh 'wget -r -np -nH --cut-dirs 4 --user=$username --password=$password http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/simulator/99-SNAPSHOT/'
                }

                latest_simulator_snapshot= sh(returnStdout: true, script: 'ls -t simulator/99-SNAPSHOT/simulator-99*.jar | head -1').trim()
                latest_analytic_snapshot= sh(returnStdout: true, script: 'ls -t analytics/99-SNAPSHOT/analytics-99*.jar | head -1').trim()

                sh "cp ${latest_analytic_snapshot} analytics.jar"
                sh "cp ${latest_simulator_snapshot} simulator.jar"
                sh "cp target/telemetry-*.jar telemetry.jar"
                sh "java -cp simulator.jar:telemetry.jar:analytics.jar com.lidar.simulation.Simulator"
                }
            }
        }

        stage("Deploy") {
            when { anyOf { branch "main"; branch "release/*" } }
            steps {
                configFileProvider([configFile(fileId: 'global-mavem-xml', variable: 'MVN_SETTINGS')]) {
                    sh "mvn -s $MVN_SETTINGS deploy -DskipTests=true"
                }
            }
        }

        stage("Tag Push") {
            when { branch "release/*" }
            steps {
                withCredentials([usernamePassword(credentialsId: 'Gitlab-username-and-password', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh 'git remote set-url origin "http://${GIT_USERNAME}:${GIT_PASSWORD}@gitlab/ofir-dev/telemetry.git"'
                    sh "git tag -a ${env.NEW_VERSION} -m '[ci-skip]'"
                    sh "git push origin ${env.NEW_VERSION}"
                }
            }
        }
    }
}
