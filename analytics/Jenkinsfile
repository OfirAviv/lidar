def nextVersion //x.y.z
def Version //x.y

pipeline {
    agent any

    tools {
        maven "maven:3.6.2"
        jdk "jdk8"
    }

    stages {
        stage('calculate tag'){
            when {
                branch "release/*"
            }
            steps {
                script {
                    sh 'git fetch --all --tags'
                        Version = (env.GIT_BRANCH  =~ /(\d+\.\d+)$/)[0][1]
                        def baseVersion = "${Version}"
                        def lastVersion = sh(script: "git tag | grep '^${baseVersion}' | sort -V | tail -n 1", returnStdout: true).trim()
                        println "Last version of ${baseVersion}: ${lastVersion}"
                        if (lastVersion == "") {
                            nextVersion = "${baseVersion}.0"
                        } else {
                            def versionParts = lastVersion.split("\\.")
                            def lastVersionNumber = Integer.parseInt(versionParts[-1])
                            nextVersion = "${baseVersion}.${lastVersionNumber + 1}"
                        }
                    sh "mvn versions:set -DnewVersion=${nextVersion}"
                    sh "mvn versions:commit"
                }
            }
        }

        stage("Checking dependency list"){
            when { branch "release/*" }
            steps{
                sh 'mvn dependency:list'
            }
        }

        stage("Build") {
            when { anyOf { branch "main"; branch "release/*"; branch "feature/*" } }
            steps {
                configFileProvider([configFile(fileId: 'global-mavem-xml', variable: 'MVN_SETTINGS')]) {
                    sh "mvn -s $MVN_SETTINGS clean package"
                }
            }
        }

        stage("e2e testing") {
            when {
                expression { return env.GIT_BRANCH =~ /^feature\/.*$/ || env.GIT_BRANCH == 'main' || env.GIT_BRANCH =~ /^release\/\d+\.\d+$/ }
            }
            steps {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'artifactory-username-password', passwordVariable: 'password', usernameVariable: 'username')]) {
                        if (env.GIT_BRANCH =~ /^feature\/.*$/ ) {
                            def lastCommitMessage = sh(script: 'git log -1 --pretty=format:%s', returnStdout: true).trim()
                            if (lastCommitMessage.contains("#e2e")) {
                                def latest_telemetry = sh (script: 'curl -s -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/telemetry/99-SNAPSHOT/ | grep -E \'analytics-[0-9\\.]+.*\\.jar<\' | sed "s/<[^>]\\+>//g" | cut -d " " -f 1 | sort -V -r | head -n 1', returnStdout: true).trim()

                                sh """curl -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/telemetry/99-SNAPSHOT/"${latest_telemetry}" --output telemetry.jar"""
                                
                                def latest_simulator = sh (script: 'curl -s -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/simulator/99-SNAPSHOT/ | grep -E \'simulator-[0-9\\.]+.*\\.jar<\' | sed "s/<[^>]\\+>//g" | cut -d " " -f 1 | sort -V -r | head -n 1', returnStdout: true).trim()
                                sh """curl -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/simulator/99-SNAPSHOT/"$latest_simulator" --output simulator.jar"""

                                sh "cp target/analytics-99-SNAPSHOT.jar ./analytics.jar"
                                sh "java -cp analytics.jar:simulator.jar:telemetry.jar com.lidar.simulation.Simulator"

                            } else {
                                sh "echo 'NOT #e2e in commit message!'"
                            }
                        }
                     if (env.GIT_BRANCH == 'main') {
                            def latest_telemetry = sh (script: 'curl -s -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/telemetry/99-SNAPSHOT/ | grep -E \'telemetry-[0-9\\.]+.*\\.jar<\' | sed "s/<[^>]\\+>//g" | cut -d " " -f 1 | sort -V -r | head -n 1', returnStdout: true).trim()
                            sh """curl -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/telemetry/99-SNAPSHOT/"${latest_telemetry}" --output telemetry.jar"""

                            def latest_simulator = sh (script: 'curl -s -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/simulator/99-SNAPSHOT/ | grep -E \'simulator-[0-9\\.]+.*\\.jar<\' | sed "s/<[^>]\\+>//g" | cut -d " " -f 1 | sort -V -r | head -n 1', returnStdout: true).trim()
                            sh """curl -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/simulator/99-SNAPSHOT/"$latest_simulator" --output simulator.jar"""

                            sh "cp target/analytics-99-SNAPSHOT.jar ./analytics.jar"
                            sh "java -cp analytics.jar:simulator.jar:telemetry.jar com.lidar.simulation.Simulator"
                        }

                    if (env.GIT_BRANCH =~ /^release\/\d+\.\d+$/) {
                        def latest_telemetry = sh (script: 'curl -s -u ${username}:${password} http://artifactory:8081/artifactory/libs-release-local/com/lidar/telemetry/ | grep -oP \'(?<=<a href=")\\d+\\.\\d+\\.\\d+/\' | sed "s:/$::" | sort -V -r | head -n 1', returnStdout: true).trim()

                        sh """curl -u ${username}:${password} http://artifactory:8081/artifactory/libs-release-local/com/lidar/telemetry/"${latest_telemetry}"/telemetry-"${latest_telemetry}".jar --output telemetry.jar"""

                        def latest_simulator = sh (script: 'curl -s -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/simulator/99-SNAPSHOT/ | grep -E \'simulator-[0-9\\.]+.*\\.jar<\' | sed "s/<[^>]\\+>//g" | cut -d " " -f 1 | sort -V -r | head -n 1', returnStdout: true).trim()

                        sh """curl -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/simulator/99-SNAPSHOT/"$latest_simulator" --output simulator.jar"""
                        sh "cp target/analytics-${nextVersion}.jar ./analytics.jar"
                        sh "java -cp analytics.jar:simulator.jar:telemetry.jar com.lidar.simulation.Simulator"
                        }
                    }
                }
            }
        }

        stage("Deploy") {
            when { anyOf { branch "main"; branch "release/*" } }
            steps {
                configFileProvider([configFile(fileId: 'global-mavem-xml', variable: 'MVN_SETTINGS')]) {
                    sh "mvn -s $MVN_SETTINGS deploy -DskipTests=true"
                }
            }
        }

        stage("Tag Push") {
            when { branch "release/*" }
            steps {
                withCredentials([usernamePassword(credentialsId: 'Gitlab-username-and-password', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh 'git remote set-url origin "http://${GIT_USERNAME}:${GIT_PASSWORD}@gitlab/ofir-dev/analytics.git"'
                    sh "git tag -a ${nextVersion} -m '[ci-skip]'"
                    sh "git push origin ${nextVersion}"
                }
            }
        }
    }
    post{
        always{
            echo "========always========"
            cleanWs()
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}
