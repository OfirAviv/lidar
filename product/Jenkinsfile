pipeline{
    agent any

    tools { 
        maven 'maven:3.6.2' 
        jdk 'jdk8' 
    }
    stages {
        stage('calculate tag'){
            when {
                branch "release/*"
            }
            steps {
                script {
                    sh "git fetch --tags"
                    def tags = sh(script: "git tag --list --merged", returnStdout: true).trim()
                    String lastTag
                    if (tags) {
                        lastTag = tags.split('\n').reverse()[0]
                        env.VERSION = lastTag
                    } else {
                        lastTag = sh(script: "echo ${BRANCH_NAME} | cut -d'/' -f2", returnStdout: true).trim()
                        env.VERSION = lastTag
                        lastTag = lastTag + ".0"
                    }
                    def (major, minor, patch) = lastTag.split('\\.')
                    def patchNum = 1
                    patchNum += Integer.parseInt(patch)
                    env.NEW_VERSION = "${major}.${minor}.${patchNum}"
                }
            }
        }
        stage('version'){
            steps{
                script{
                    version_prefix = sh(returnStdout: true, script: "echo ${env.VERSION} | cut -d '.' -f 1,2").trim()
                    echo "${version_prefix}"
                    withCredentials([usernamePassword(credentialsId: 'artifactory-username-password', passwordVariable: 'password', usernameVariable: 'username')]) {
                        ANALYTICS = sh(returnStdout: true, script: 'wget -r -np -nH --cut-dirs 4 --user=$username --password=$password http://artifactory:8081/artifactory/libs-release-local/com/lidar/analytics/').trim()
                        TELEMETRY = sh(returnStdout: true, script: 'wget -r -np -nH --cut-dirs 4 --user=$username --password=$password http://artifactory:8081/artifactory/libs-release-local/com/lidar/telemetry/').trim()
                        telemetry_folder = sh(returnStdout: true, script: "cd ./telemetry/ && ls -d */ | grep ${version_prefix} | head -1").trim()
                        analytics_folder = sh(returnStdout: true, script: "cd ./analytics/ && ls -d */ | grep ${version_prefix} | head -1").trim()
                        
                        sh 'echo "${telemetry_folder}"'
                        sh 'echo "${analytics_folder}"'
                        sh 'echo "${version_prefix}"'

                        if (telemetry_folder == ""){
                            error("telemetry and product versions do not match")
                        }
                        if (analytics_folder == ""){
                            error("analytics and product versions do not match")
                        }

                        latest_telemetry_clean = sh(returnStdout: true, script:"basename ${telemetry_folder} '/'").trim()
                        latest_analytics_clean = sh(returnStdout: true, script:"basename ${analytics_folder} '/'").trim()

                        telemetry_path = "./telemetry/${latest_telemetry_clean}/telemetry-${latest_telemetry_clean}.jar"
                        analytics_path = "./analytics/${latest_analytics_clean}/analytics-${latest_analytics_clean}.jar"
                        
                        echo "telemetry_path ---> ${telemetry_path}"
                        echo "analytics_path ---> ${analytics_path}"

                        sh "mvn versions:set-property -DnewVersion='${latest_telemetry_clean}' -Dproperty=telemetry.version"
                        sh "mvn versions:set-property -DnewVersion='${latest_analytics_clean}' -Dproperty=analytics.version"
                        sh "mvn versions:set -DnewVersion=${env.NEW_VERSION}"
                        sh "mvn dependency:list"
                        sh "mvn versions:commit"
                    }
                }
            }
        }
        stage('build & unit tests'){
            when {
                anyOf {
                    branch "release/*"
                }
            }
            steps {
                configFileProvider([configFile(fileId: 'global-mavem-xml', variable: 'MAVEN_SETTINGS_XML')]) {
                    sh "mvn -s $MAVEN_SETTINGS_XML clean package"
                }
            }
        }
        stage('e2e tests'){
            when {
                anyOf {
                    branch "release/*"
                } 
            }
            steps {
                script{
                    withCredentials([usernamePassword(credentialsId: 'artifactory-username-password', passwordVariable: 'password', usernameVariable: 'username')]) {
                        sh 'wget -r -np -nH --cut-dirs 4 --user=$username --password=$password http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/simulator/99-SNAPSHOT/'
                    }
                    NEWEST_SIMULATOR_SNAPSHOT= sh(returnStdout: true, script: 'ls -t ./simulator/99-SNAPSHOT/simulator-99*.jar | head -1').trim()
                    sh "cp ${NEWEST_SIMULATOR_SNAPSHOT} simulator.jar"
                    sh "unzip ./target/*.zip"
                    latest_analytic= sh(returnStdout: true, script: 'ls | grep analytics-').trim()
                    sh "java -cp ./simulator.jar:./telemetry-${latest_telemetry_clean}.jar:./analytics-${latest_analytics_clean}.jar com.lidar.simulation.Simulator"
                }
            }
        }
        stage('deploy'){
            when {
                anyOf{
                    branch "release/*"                
                }
            }
            steps {
                configFileProvider([configFile(fileId: 'global-mavem-xml', variable: 'MAVEN_SETTINGS_XML')]) {
                    sh "mvn -s $MAVEN_SETTINGS_XML clean deploy -DskipTests"
                }
            }
        }
        stage('tag release'){
            when {
                branch "release/*"
            }
            steps{
                withCredentials([usernamePassword(credentialsId: 'Gitlab-username-and-password', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh 'git remote set-url origin "http://${GIT_USERNAME}:${GIT_PASSWORD}@gitlab/ofir-dev/product.git"'
                    sh "git tag -a ${env.NEW_VERSION} -m '[ci-skip]'"
                    sh "git push origin ${env.NEW_VERSION}"
                }
        }
    }
}
post{
        always{
            echo "========always========"
            cleanWs()
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}

