pipeline {
    agent any

    tools {
        maven "maven:3.6.2"
        jdk "jdk8"
    }

    stages {

        stage("Build") {
            when { anyOf { branch "main"} }
            steps {
                configFileProvider([configFile(fileId: 'global-mavem-xml', variable: 'MVN_SETTINGS')]) {
                    sh "mvn -s $MVN_SETTINGS clean package"
                }
            }
        }

        stage("e2e tests"){
    when { branch "main" }
    steps {
        script {
            
            withCredentials([usernamePassword(credentialsId: 'artifactory-username-password', passwordVariable: 'password', usernameVariable: 'username')]) {
                def latest_analytics = sh(script: 'curl -s -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/analytics/99-SNAPSHOT/ | grep -E \'analytics-[0-9\\.]+.*\\.jar<\' | sed "s/<[^>]\\+>//g" | cut -d " " -f 1 | sort -V -r | head -n 1', returnStdout: true).trim()
                sh "curl -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/analytics/99-SNAPSHOT/${latest_analytics} --output analytics.jar"

                def latest_telemetry = sh(script: 'curl -s -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/telemetry/99-SNAPSHOT/ | grep -E \'telemetry-[0-9\\.]+.*\\.jar<\' | sed "s/<[^>]\\+>//g" | cut -d " " -f 1 | sort -V -r | head -n 1', returnStdout: true).trim()
                sh "curl -u ${username}:${password} http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/telemetry/99-SNAPSHOT/${latest_telemetry} --output telemetry.jar"
                sh "cp target/simulator-*.jar simulator.jar"
                sh "java -cp ./simulator.jar:./telemetry.jar:./analytics.jar com.lidar.simulation.Simulator"
                }
            }
        }
    }


        stage("Deploy") {
            when { anyOf { branch "main" } }
            steps {
                configFileProvider([configFile(fileId: 'global-mavem-xml', variable: 'MVN_SETTINGS')]) {
                    sh "mvn -s $MVN_SETTINGS deploy -DskipTests=true"
                }
            }
        }
    } 
}
